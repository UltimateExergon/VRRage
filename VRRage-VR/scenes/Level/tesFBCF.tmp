[gd_scene load_steps=11 format=3 uid="uid://7oiv4x5w20g2"]

[ext_resource type="Script" path="res://scripts/level.gd" id="1_4uqd0"]
[ext_resource type="ArrayMesh" uid="uid://b8gwlrftd1c7n" path="res://assets/models/testlevel/dummy_raum.obj" id="1_cyaxt"]
[ext_resource type="PackedScene" uid="uid://0dswmvtcjlft" path="res://scenes/object_scenes/testlevel/block.tscn" id="5_lxofl"]
[ext_resource type="PackedScene" uid="uid://ijpoii8btt68" path="res://scenes/object_scenes/testlevel/stuhl.tscn" id="6_rsxg6"]
[ext_resource type="PackedScene" uid="uid://brr88ibcpmb4j" path="res://scenes/teleporter.tscn" id="6_typxf"]
[ext_resource type="PackedScene" uid="uid://bbmagsn1leo2j" path="res://scenes/score.tscn" id="7_4qcnn"]
[ext_resource type="PackedScene" uid="uid://bcy1nlojdvrcd" path="res://scenes/object_scenes/testlevel/vase.tscn" id="7_xys1m"]

[sub_resource type="Environment" id="Environment_l4b7o"]
ambient_light_color = Color(0.52, 0.52, 0.52, 1)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_b8k8n"]
data = PackedVector3Array(21.8643, -6.4016, -17.8679, 21.8643, 18.3012, -17.8679, 21.8643, -6.4016, 6.4016, 21.8643, -6.4016, 6.4016, 21.8643, 18.3012, -17.8679, 21.8643, 18.3012, 6.4016, -21.7969, -6.4016, 6.4016, -21.7969, 18.3012, 6.4016, -21.7969, -6.4016, -17.8679, -21.7969, -6.4016, -17.8679, -21.7969, 18.3012, 6.4016, -21.7969, 18.3012, -17.8679, -21.7969, -6.4016, -17.8679, -21.7969, 18.3012, -17.8679, 21.8643, -6.4016, -17.8679, 21.8643, -6.4016, -17.8679, -21.7969, 18.3012, -17.8679, 21.8643, 18.3012, -17.8679, -21.7969, 18.3012, 6.4016, 21.8643, 18.3012, 6.4016, -21.7969, 18.3012, -17.8679, -21.7969, 18.3012, -17.8679, 21.8643, 18.3012, 6.4016, 21.8643, 18.3012, -17.8679, 21.8643, -6.4016, 6.4016, -21.7969, -6.4016, 6.4016, 21.8643, -6.4016, -17.8679, 21.8643, -6.4016, -17.8679, -21.7969, -6.4016, 6.4016, -21.7969, -6.4016, -17.8679, 3.1408, 3.1408, 6.4016, 3.1408, -6.4016, 6.4016, 21.8643, 18.3012, 6.4016, 21.8643, 18.3012, 6.4016, 3.1408, -6.4016, 6.4016, 21.8643, -6.4016, 6.4016, -3.1408, 3.1408, 6.4016, 3.1408, 3.1408, 6.4016, -21.7969, 18.3012, 6.4016, -21.7969, 18.3012, 6.4016, 3.1408, 3.1408, 6.4016, 21.8643, 18.3012, 6.4016, 3.1408, -6.4016, 6.4016, -3.1408, -6.4016, 6.4016, 21.8643, -6.4016, 6.4016, 21.8643, -6.4016, 6.4016, -3.1408, -6.4016, 6.4016, -21.7969, -6.4016, 6.4016, -3.1408, -6.4016, 6.4016, -3.1408, 3.1408, 6.4016, -21.7969, -6.4016, 6.4016, -21.7969, -6.4016, 6.4016, -3.1408, 3.1408, 6.4016, -21.7969, 18.3012, 6.4016, -3.1408, 3.1408, 6.4016, -3.1408, -6.4016, 6.4016, -3.1408, 3.1408, 34.3959, -3.1408, 3.1408, 34.3959, -3.1408, -6.4016, 6.4016, -3.1408, -6.4016, 34.3959, 3.1408, 3.1408, 6.4016, -3.1408, 3.1408, 6.4016, 3.1408, 3.1408, 34.3959, 3.1408, 3.1408, 34.3959, -3.1408, 3.1408, 6.4016, -3.1408, 3.1408, 34.3959, -3.1408, -6.4016, 6.4016, 3.1408, -6.4016, 6.4016, -3.1408, -6.4016, 34.3959, -3.1408, -6.4016, 34.3959, 3.1408, -6.4016, 6.4016, 3.1408, -6.4016, 34.3959, 3.1408, -6.4016, 6.4016, 3.1408, 3.1408, 6.4016, 3.1408, -6.4016, 34.3959, 3.1408, -6.4016, 34.3959, 3.1408, 3.1408, 6.4016, 3.1408, 3.1408, 34.3959, -3.1408, -6.4016, 34.3959, 3.1408, -6.4016, 34.3959, -3.1408, -6.4016, 76.6899, -3.1408, -6.4016, 76.6899, 3.1408, -6.4016, 34.3959, 3.1408, -6.4016, 76.6899, 3.1408, 3.1408, 76.6899, 3.1408, -6.4016, 76.6899, 39.6497, 3.1408, 76.6899, 39.6497, 3.1408, 76.6899, 3.1408, -6.4016, 76.6899, 39.6497, -6.4016, 76.6899, -3.1408, 3.1408, 34.3959, -3.1408, -6.4016, 34.3959, -3.1408, 3.1408, 76.6899, -3.1408, 3.1408, 76.6899, -3.1408, -6.4016, 34.3959, -3.1408, -6.4016, 76.6899, -3.1408, 3.1408, 34.3959, -3.1408, 3.1408, 76.6899, -3.1408, 20.8634, 34.3959, -3.1408, 20.8634, 34.3959, -3.1408, 3.1408, 76.6899, -3.1408, 20.8634, 76.6899, 3.1408, 20.8634, 34.3959, -3.1408, 20.8634, 34.3959, 3.1408, 20.8634, 76.6899, 3.1408, 20.8634, 76.6899, -3.1408, 20.8634, 34.3959, -3.1408, 20.8634, 76.6899, -3.1408, 3.1408, 76.6899, 3.1408, 3.1408, 76.6899, -3.1408, 20.8634, 76.6899, -3.1408, 20.8634, 76.6899, 3.1408, 3.1408, 76.6899, 3.1408, 20.8634, 76.6899, 3.1408, 20.8634, 76.6899, 3.1408, 3.1408, 76.6899, 39.6497, 20.8634, 76.6899, 39.6497, 20.8634, 76.6899, 3.1408, 3.1408, 76.6899, 39.6497, 3.1408, 76.6899, 3.1408, 3.1408, 34.3959, -3.1408, 3.1408, 34.3959, 3.1408, 20.8634, 34.3959, 3.1408, 20.8634, 34.3959, -3.1408, 3.1408, 34.3959, -3.1408, 20.8634, 34.3959, 39.6497, -6.4016, 34.3959, 39.6497, 3.1408, 34.3959, 39.6497, -6.4016, 76.6899, 39.6497, -6.4016, 76.6899, 39.6497, 3.1408, 34.3959, 39.6497, 3.1408, 76.6899, 3.1408, -6.4016, 34.3959, 3.1408, 3.1408, 34.3959, 39.6497, -6.4016, 34.3959, 39.6497, -6.4016, 34.3959, 3.1408, 3.1408, 34.3959, 39.6497, 3.1408, 34.3959, 3.1408, -6.4016, 76.6899, 3.1408, -6.4016, 34.3959, 39.6497, -6.4016, 76.6899, 39.6497, -6.4016, 76.6899, 3.1408, -6.4016, 34.3959, 39.6497, -6.4016, 34.3959, 39.6497, 3.1408, 76.6899, 39.6497, 3.1408, 34.3959, 39.6497, 20.8634, 76.6899, 39.6497, 20.8634, 76.6899, 39.6497, 3.1408, 34.3959, 39.6497, 20.8634, 34.3959, 3.1408, 20.8634, 34.3959, 3.1408, 20.8634, 76.6899, 39.6497, 20.8634, 34.3959, 39.6497, 20.8634, 34.3959, 3.1408, 20.8634, 76.6899, 39.6497, 20.8634, 76.6899, 3.1408, 3.1408, 34.3959, 3.1408, 20.8634, 34.3959, 39.6497, 3.1408, 34.3959, 39.6497, 3.1408, 34.3959, 3.1408, 20.8634, 34.3959, 39.6497, 20.8634, 34.3959, 3.1408, 3.1408, 76.6899, -3.1408, 3.1408, 76.6899, 3.1408, -6.4016, 76.6899, 3.1408, -6.4016, 76.6899, -3.1408, 3.1408, 76.6899, -3.1408, -6.4016, 76.6899, -17.4129, -1.9871, 6.4016, -17.4129, -6.4016, 6.4016, -17.4129, -1.9871, -12.021, -17.4129, -1.9871, -12.021, -17.4129, -6.4016, 6.4016, -17.4129, -6.4016, -12.021, -17.4129, -1.9871, -12.021, -17.4129, -6.4016, -12.021, -15.4129, -1.9871, -12.021, -15.4129, -1.9871, -12.021, -17.4129, -6.4016, -12.021, -15.4129, -6.4016, -12.021, -15.4129, -1.9871, -12.021, -15.4129, -6.4016, -12.021, -15.4129, -1.9871, 6.4016, -15.4129, -1.9871, 6.4016, -15.4129, -6.4016, -12.021, -15.4129, -6.4016, 6.4016, -15.4129, -1.9871, 6.4016, -15.4129, -6.4016, 6.4016, -17.4129, -1.9871, 6.4016, -17.4129, -1.9871, 6.4016, -15.4129, -6.4016, 6.4016, -17.4129, -6.4016, 6.4016, -15.4129, -6.4016, -12.021, -17.4129, -6.4016, -12.021, -15.4129, -6.4016, 6.4016, -15.4129, -6.4016, 6.4016, -17.4129, -6.4016, -12.021, -17.4129, -6.4016, 6.4016, -17.4129, -1.9871, -12.021, -15.4129, -1.9871, -12.021, -17.4129, -1.9871, 6.4016, -17.4129, -1.9871, 6.4016, -15.4129, -1.9871, -12.021, -15.4129, -1.9871, 6.4016)

[sub_resource type="GDScript" id="GDScript_u2f34"]
script/source = "extends Node3D

const scoreFloatingDuration : float = 1.5
const scoreTargetLocation : Vector3 = Vector3(0, 1.5, 0)

@export var fragmented : PackedScene: set = set_fragmented
@export var destroyable_by : Array = [] : get = get_destroyableBy
@export var hand_destruction : bool = false
@export var dropID : String = \"\"
@export var score_points : int = 100

var shard_container : Node3D

var current_level : String : set = set_currentLevel

var linear_velocity : float

@export_group(\"Collision\")
@export_flags_3d_physics var collision_mask = 1

@export_group(\"Physics\")
@export var explosion_power: float = 1.0
@export var vanish_time : int = 5

@onready var main_node = get_tree().root.get_children()[Globals.main_order]

static var _cached_scenes := {}
static var _cached_shapes := {}

func _ready():
	var body = get_children()[0]
	body.add_to_group(\"DESTRUCTIBLE\")
	body.body_entered.connect(_on_body_entered)
	body.contact_monitor = true
	body.max_contacts_reported = 10
	
func _physics_process(_delta: float) -> void:
	if get_children()[0] is RigidBody3D:
		linear_velocity = get_children()[0].linear_velocity.length()

func destroy() -> void:
	self.position = self.get_children()[0].global_position
	var saved_velocity = self.get_children()[0].linear_velocity
	
	shard_container = Node3D.new()
	add_child(shard_container)
	main_node.add_active_shard(shard_container)
	
	for shard in _get_shards():
		_add_shard(shard, saved_velocity)
	
	add_drop(saved_velocity)
	add_score_points()
	add_floatingScore(shard_container.position)
	#add_timer()
	
	self.get_children()[0].queue_free()
	
func add_floatingScore(position: Vector3):
	var destructionScore = Globals.destructionScore.instantiate()
	add_child(destructionScore)
	destructionScore.text = \"+\" + str(score_points)
	
	var tween = get_tree().create_tween()
	var tween_pos = position + scoreTargetLocation
	print(self.position, tween_pos)
	tween.tween_property(destructionScore, \"position\", tween_pos, scoreFloatingDuration)
	tween.tween_callback(destructionScore.queue_free)
	
func get_destroyableBy() -> Array:
	return destroyable_by
	
func add_score_points():
	main_node.increase_score(score_points)

func _get_shards() -> Array[Node]:
	if not fragmented in _cached_scenes:
		_cached_scenes[fragmented] = fragmented.instantiate()
		for shard_mesh in _cached_scenes[fragmented].get_children():
			_cached_shapes[shard_mesh] = shard_mesh.mesh.create_convex_shape()
	return (_cached_scenes[fragmented].get_children() as Array)\\
			.filter(func(node): return node is MeshInstance3D)
	
func set_fragmented(to: PackedScene) -> void:
	fragmented = to
	if is_inside_tree():
		get_tree().node_configuration_warning_changed.emit(self)

func _get_configuration_warnings() -> PackedStringArray:
	return [\"No fragmented version set\"] if not fragmented else []

func _add_shard(original: MeshInstance3D, old_velocity: Vector3) -> void:
	var body := RigidBody3D.new()
	var mesh := MeshInstance3D.new()
	var shape := CollisionShape3D.new()
	body.add_child(mesh)
	body.add_child(shape)
	shard_container.add_child(body, true)
	body.global_position = global_transform.origin + original.position
	body.global_rotation = global_rotation
	body.collision_layer = 0
	body.collision_mask = collision_mask
	body.set_collision_mask_value(4, true)
	mesh.scale = original.scale
	shape.scale = original.scale
	shape.shape = _cached_shapes[original]
	mesh.mesh = original.mesh
	body.apply_impulse(old_velocity + _random_direction() * explosion_power,
			-original.position.normalized())
			
func add_drop(old_velocity: Vector3):
	if dropID != \"\":
		var item = load(Globals.itemPath + current_level + \"/\" + dropID + Globals.sceneFormat).instantiate()
		
		var rigidBody = get_rigid_body(item)
		rigidBody.set_dropID(dropID)
		
		add_child(item)
		rigidBody.linear_velocity = old_velocity
		
func get_rigid_body(node: Node) -> RigidBody3D:
	if node is RigidBody3D:
		return node
		
	for child in node.get_children():
		if child is RigidBody3D:
			return child
		else:
			if child.get_child_count() > 0:
				return get_rigid_body(child)
	return null
		
func check_destroyable(body) -> bool:
	var id = body.objectID
	
	for i in destroyable_by:
		if i == id:
			return true
			
	return false
		
func set_currentLevel(levelname : String) -> void:
	current_level = levelname
		
func add_timer():
	var timer : Timer = Timer.new()
	add_child(timer)
	timer.one_shot = true
	timer.timeout.connect(_on_timer_timeout)
	timer.start(vanish_time)
	print(\"Timer started\")
	
func _on_timer_timeout():
	print(\"Timeout\")
	shard_container.queue_free()

static func _random_direction() -> Vector3:
	return (Vector3(randf(), randf(), randf()) - Vector3.ONE / 2.0).normalized() * 2.0
	
func _on_body_entered(body: Node):
	var rigidBody = get_children()[0]
	var enteringRigidBody = get_rigid_body(body)

	print(body.name)

	if !rigidBody.got_picked_up:
		if destroyable_by.size() > 0 and !body.is_in_group(\"room\"):
			if check_destroyable(body) and enteringRigidBody.linear_velocity.length() > 5:
				self.destroy()
		elif rigidBody.linear_velocity.length() > 1 and body.is_in_group(\"room\"):
				self.destroy()
		elif body.is_in_group(\"hand\") and hand_destruction == true:
			self.destroy()
			
"

[node name="testlevel" type="Node3D"]
script = ExtResource("1_4uqd0")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_l4b7o")

[node name="Raum" type="StaticBody3D" parent="." groups=["room"]]
transform = Transform3D(0.25, 0, 0, 0, 0.25, 0, 0, 0, 0.25, 0, 1.83053, 0)
collision_mask = 0

[node name="MeshInstance3D" type="MeshInstance3D" parent="Raum"]
mesh = ExtResource("1_cyaxt")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Raum"]
shape = SubResource("ConcavePolygonShape3D_b8k8n")

[node name="OmniLight3D" type="OmniLight3D" parent="Raum"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.127, -7.11548)

[node name="Teleporter" parent="." instance=ExtResource("6_typxf")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.52947, -2.24113e-05, -3.48849)
teleport_level = "level_select"
label_text = "Level Selection"

[node name="Score" parent="." instance=ExtResource("7_4qcnn")]

[node name="block" parent="." instance=ExtResource("5_lxofl")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.0691, 1.66856, -1.70887)

[node name="chair" parent="." instance=ExtResource("6_rsxg6")]
transform = Transform3D(-0.995243, 0, 0.0974265, 0, 1, 0, -0.0974265, 0, -0.995243, 4.39241, 0.168138, 0.87831)

[node name="chair2" parent="." instance=ExtResource("6_rsxg6")]
transform = Transform3D(-0.995243, 0, 0.0974265, 0, 1, 0, -0.0974265, 0, -0.995243, 4.39148, 0.168138, 1.63731)
script = SubResource("GDScript_u2f34")
fragmented = null
dropID = ""

[node name="vase" parent="." instance=ExtResource("7_xys1m")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.57441, 0.437879, -0.734952)
